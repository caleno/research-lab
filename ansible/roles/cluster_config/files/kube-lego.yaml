apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-lego
  namespace: kube-system

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-lego
rules:
  - apiGroups:
    - extensions
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-lego
subjects:
  - kind: ServiceAccount
    name: kube-lego
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: kube-lego
  apiGroup: rbac.authorization.k8s.io

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-lego
  namespace: kube-system
rules:
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
    - list
    - watch
    - create
    - patch
    - update
  - apiGroups:
    - extensions
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
    - create
    - patch
    - update

---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-lego
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: kube-lego
roleRef:
  kind: Role
  name: kube-lego
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
metadata:
  name: kube-lego-nginx
  namespace: kube-system
data:
  # modify this to specify your address
  lego.email: "system-saker@uninett.no"
  # configure letencrypt's production api
  lego.url: "https://acme-v01.api.letsencrypt.org/directory"
kind: ConfigMap

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-lego-nginx
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: kube-lego
    spec:
      serviceAccount: kube-lego
      containers:
      - name: kube-lego-nginx
        image: jetstack/kube-lego:0.1.4
        imagePullPolicy: Always
        resources:
          limits:
            memory: 200Mi
            cpu: 200m
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
        env:
        - name: LEGO_EMAIL
          valueFrom:
            configMapKeyRef:
              name: kube-lego-nginx
              key: lego.email
        - name: LEGO_URL
          valueFrom:
            configMapKeyRef:
              name: kube-lego-nginx
              key: lego.url
        - name: LEGO_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LEGO_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 1

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: kube-lego-backend
  namespace: kube-system
spec:
  podSelector:
    matchLabels:
      app: kube-lego
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: kube-ingress
      ports:
        - protocol: TCP
          port: 8080
