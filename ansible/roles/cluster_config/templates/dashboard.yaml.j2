apiVersion: v1
kind: ServiceAccount
metadata:
  name: dashboard
  namespace: kube-system

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: dashboard
  namespace: kube-system
  labels:
    app: dashboard
    kubernetes.io/cluster-service: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dashboard
  template:
    metadata:
      labels:
        app: dashboard
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      serviceAccountName: dashboard
      volumes:
        - name: db-proxy-config
          secret:
            secretName: db-proxy-config
      containers:
      - name: auth-proxy
        image: registry.uninett.no/public/goidc-proxy:latest
        imagePullPolicy: Always
        ports:
          - containerPort: 80
        volumeMounts:
          - name: db-proxy-config
            mountPath: /conf
        workingDir: /conf
      - name: dashboard
        image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1
        args:
        - --heapster-host=http://heapster.kube-system.svc
        resources:
          limits:
            cpu: 300m
            memory: 300Mi
          requests:
            cpu: 300m
            memory: 300Mi
        ports:
        - containerPort: 9090
        livenessProbe:
          httpGet:
            path: /
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: dashboard
  namespace: kube-system
  annotations:
    kubernetes.io/tls-acme: "true"
spec:
  tls:
  - hosts:
    - db.{{cluster_dns_domain}}
    secretName: dashboard-tls
  rules:
  - host: db.{{cluster_dns_domain}}
    http:
      paths:
      - path: /
        backend:
          serviceName: dashboard
          servicePort: 80

---
kind: Service
apiVersion: v1
metadata:
  labels:
    app: dashboard
  name: dashboard
  namespace: kube-system
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: dashboard
---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dashboard
  namespace: kube-system
spec:
  podSelector:
    matchLabels:
      app: dashboard
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: kube-ingress
      ports:
        - protocol: TCP
          port: 80
